# program template for Spaceship
import simplegui
import math
import random

# globals for user interface
WIDTH = 800
HEIGHT = 600
FIRING_ANGLE_VEL_INC = 0.05
FRICTION = 0.992

rocks = set([])
missiles = set([])

score = 0
lives = 3
time = 0
started = False

class ImageInfo:
    def __init__(self, center, size, radius = 0, lifespan = None, animated = False):
        self.center = center
        self.size = size
        self.radius = radius
        if lifespan:
            self.lifespan = lifespan
        else:
            self.lifespan = float('inf')
        self.animated = animated

    def get_center(self):
        return self.center

    def get_size(self):
        return self.size

    def get_radius(self):
        return self.radius

    def get_lifespan(self):
        return self.lifespan

    def get_animated(self):
        return self.animated

    
# art assets created by Kim Lathrop, may be freely re-used in non-commercial projects, please credit Kim
    
# debris images - debris1_brown.png, debris2_brown.png, debris3_brown.png, debris4_brown.png
#                 debris1_blue.png, debris2_blue.png, debris3_blue.png, debris4_blue.png, debris_blend.png
debris_info = ImageInfo([320, 240], [640, 480])
debris_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/debris2_blue.png")

# nebula images - nebula_brown.png, nebula_blue.png
nebula_info = ImageInfo([400, 300], [800, 600])
nebula_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/nebula_blue.f2014.png")

# splash image
splash_info = ImageInfo([200, 150], [400, 300])
splash_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/splash.png")

# ship image
ship_info = ImageInfo([45, 45], [90, 90], 35)
ship_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/double_ship.png")

# missile image - shot1.png, shot2.png, shot3.png
missile_info = ImageInfo([5,5], [10, 10], 3, 50)
missile_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/shot2.png")

# asteroid images - asteroid_blue.png, asteroid_brown.png, asteroid_blend.png
asteroid_info = ImageInfo([45, 45], [90, 90], 40)
asteroid_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/asteroid_blue.png")

# animated explosion - explosion_orange.png, explosion_blue.png, explosion_blue2.png, explosion_alpha.png
explosion_info = ImageInfo([64, 64], [128, 128], 17, 24, True)
explosion_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/explosion_alpha.png")

# sound assets purchased from sounddogs.com, please do not redistribute
soundtrack = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/soundtrack.mp3")
missile_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/missile.mp3")
missile_sound.set_volume(.5)
ship_thrust_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/thrust.mp3")
explosion_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/explosion.mp3")

# alternative upbeat soundtrack by composer and former IIPP student Emiel Stopler
# please do not redistribute without permission from Emiel at http://www.filmcomposer.nl
#soundtrack = simplegui.load_sound("https://storage.googleapis.com/codeskulptor-assets/ricerocks_theme.mp3")

# helper functions to handle transformations
def angle_to_vector(ang):
    return [math.cos(ang), math.sin(ang)]

def dist(p,q):
    return math.sqrt((p[0] - q[0]) ** 2+(p[1] - q[1]) ** 2)

def wrap_screen(pos):
    #wrap position (when object touches edge of screen, comes out on the other side)
        if pos[0] <= 0:
            pos[0] = WIDTH
        elif pos[0] >= WIDTH:
            pos[0] = 0
        elif pos[1] <= 0:
            pos[1] = HEIGHT
        elif pos[1] >= HEIGHT:
            pos[1] = 0 

def proccess_sprite_group(group, canvas):
    #updates, draws and removes sprites
    remove_sprites = []
    for sprite in group:
        sprite.update()
        sprite.draw(canvas)
        if sprite.update():
            remove_sprites.append(sprite)
    group.difference_update(remove_sprites)
  
def group_collide(group, other_object):
    #checks for collisions between an object and objects in a groups
    remove_sprites = []
    collisionFound = False
    for sprite in group:
        if sprite.collision(other_object):
            remove_sprites.append(sprite)
            collisionFound = True
    group.difference_update(remove_sprites)
    return collisionFound

def group_group_collide(group1, group2):
    #checks for collisions between objects in two groups
    for sprite in list(group1):
        return group_collide(group2, sprite)
        
# Ship class
class Ship:
    def __init__(self, pos, vel, angle, image, info):
        self.pos = [pos[0],pos[1]]
        self.vel = [vel[0],vel[1]]
        self.thrust = False
        self.angle = angle
        self.angle_vel = 0
        self.image = image
        self.image_center = info.get_center()
        self.image_size = info.get_size()
        self.radius = info.get_radius()
        self.vector = angle_to_vector(self.angle)
        
    def draw(self,canvas):
        if self.thrust:
            canvas.draw_image(self.image, [3 * self.image_center[0], self.image_center[0]], self.image_size, self.pos, self.image_size, self.angle)
        else:
            canvas.draw_image(self.image, self.image_center, self.image_size, self.pos, self.image_size, self.angle)

    def update(self):
        #update angle from keyhandler
        self.angle += self.angle_vel        

        #accelarate towards where ship is pointed
        self.vector = angle_to_vector(self.angle)
        
        if self.thrust:
            self.vel[0] += self.vector[0] / 15
            self.vel[1] += self.vector[1] / 15
                 
        #update position (move ship)
        self.pos[0] += self.vel[0]
        self.pos[1] += self.vel[1]
        
        #slow down/stop ship
        self.vel[0] *= FRICTION	
        self.vel[1] *= FRICTION
        
        #wrap position (when ship touches edge of screen, comes out on the other side)
        wrap_screen(self.pos)
                   
    def shoot(self):
        global missiles
        
        missile_pos = [self.pos[0] + self.vector[0] * self.radius, self.pos[1] + self.vector[1] * self.radius]
        missile_vel = [self.vel[0] + 7 * self.vector[0], self.vel[1] + 7 * self.vector[1]]
        missiles.add(Sprite(missile_pos, missile_vel, 0, 0, missile_image, missile_info, missile_sound))

# Sprite class
class Sprite:
    def __init__(self, pos, vel, ang, ang_vel, image, info, sound = None):
        self.pos = [pos[0],pos[1]]
        self.vel = [vel[0],vel[1]]
        self.angle = ang
        self.angle_vel = ang_vel
        self.image = image
        self.image_center = info.get_center()
        self.image_size = info.get_size()
        self.radius = info.get_radius()
        self.lifespan = info.get_lifespan()
        self.animated = info.get_animated()
        self.age = 0
        if sound:
            sound.rewind()
            sound.play()
   
    def draw(self, canvas):
        canvas.draw_image(self.image, self.image_center, self.image_size, self.pos, self.image_size, self.angle)
    
    def update(self):
        #update angle from keyhandler
        self.angle += self.angle_vel
        
        #update position (move ship)
        self.pos[0] += self.vel[0]
        self.pos[1] += self.vel[1]  
            
        wrap_screen(self.pos)
        
        #determine age
        self.age += 1
        if type(self.lifespan) == int and self.age >= self.lifespan:
            return True
        return False
      
        
    def collision(self, other_object):
        if dist(self.pos, other_object.pos) < self.radius + other_object.radius:
            return True
        return False
    
#key and mouse handlers
def keydown(key):    
    #turn ship
    if key == simplegui.KEY_MAP["right"]:
        my_ship.angle_vel = FIRING_ANGLE_VEL_INC
    elif key == simplegui.KEY_MAP["left"]:
        my_ship.angle_vel = -FIRING_ANGLE_VEL_INC
   
    #ship thrusters (accelerate)    
    if key == simplegui.KEY_MAP["up"]:
        my_ship.thrust = True
        ship_thrust_sound.play()
        
    #shoot missile    
    if key == simplegui.KEY_MAP["space"]:
        my_ship.shoot()
        
def keyup(key):
    #stop turning ship
    if key == simplegui.KEY_MAP["right"] or key == simplegui.KEY_MAP["left"]:
        my_ship.angle_vel = 0
    
    #stop ship thrusters (accelerate)    
    if key == simplegui.KEY_MAP["up"]:
        my_ship.thrust = False
        ship_thrust_sound.rewind()

# mouseclick handlers that reset UI and conditions whether splash image is drawn
def click(pos):
    global started
    center = [WIDTH / 2, HEIGHT / 2]
    size = splash_info.get_size()
    inwidth = (center[0] - size[0] / 2) < pos[0] < (center[0] + size[0] / 2)
    inheight = (center[1] - size[1] / 2) < pos[1] < (center[1] + size[1] / 2)
    if (not started) and inwidth and inheight:
        started = True        
        
#draw handler
def draw(canvas):
    global time, started, rocks, lives, score
    
    # animiate background
    time += 1
    wtime = (time / 4) % WIDTH
    center = debris_info.get_center()
    size = debris_info.get_size()
    canvas.draw_image(nebula_image, nebula_info.get_center(), nebula_info.get_size(), [WIDTH / 2, HEIGHT / 2], [WIDTH, HEIGHT])
    canvas.draw_image(debris_image, center, size, (wtime - WIDTH / 2, HEIGHT / 2), (WIDTH, HEIGHT))
    canvas.draw_image(debris_image, center, size, (wtime + WIDTH / 2, HEIGHT / 2), (WIDTH, HEIGHT))

    # draw ship and sprites
    my_ship.draw(canvas)
    
    # update ship and sprites
    my_ship.update()
    if group_collide(rocks, my_ship):
        lives -= 1
    group_collide(rocks, my_ship)
    
    if group_group_collide(missiles, rocks):
        score += 1

    group_group_collide(missiles, rocks)
        
    proccess_sprite_group(missiles, canvas)
    proccess_sprite_group(rocks, canvas)
    
    #restarts game if lives reach 0
    if lives <= 0:
        started = False
        rocks = set([])
        lives = 3
        score = 0
    
    #draw score and lives
    canvas.draw_text('Score: ' + str(score), [WIDTH - 150, 50], 30, 'White')
    canvas.draw_text('Lives: ' + str(lives), [30, 50], 30, 'Yellow')
    
    # draw splash screen if not started
    if not started:
        canvas.draw_image(splash_image, splash_info.get_center(), 
                          splash_info.get_size(), [WIDTH / 2, HEIGHT / 2], 
                          splash_info.get_size())
    
# timer handler that spawns a rock    
def rock_spawner():
    global rocks
        
    if len(rocks) < 12 and started:
        position = [random.randrange(0, WIDTH), random.randrange(0, HEIGHT)]
        angle_vel = random.choice([0.02, -0.02])
        velocity = [random.randrange(-1, 2), random.randrange(-1, 2)]
        rocks.add(Sprite(position, velocity, 0, angle_vel, asteroid_image, asteroid_info))
    
# initialize frame
frame = simplegui.create_frame("Asteroids", WIDTH, HEIGHT)

# initialize ship and two sprites
my_ship = Ship([WIDTH / 2, HEIGHT / 2], [0, 0], 0, ship_image, ship_info)

# register handlers
frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)
frame.set_mouseclick_handler(click)
timer = simplegui.create_timer(1000.0, rock_spawner)

# get things rolling
timer.start()
frame.start()
